plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    flavorDimensions 'feature'
    productFlavors {
        core {
            dimension 'feature'
            versionName '1.0.0'
        }
        full {
            dimension 'feature'
            versionName '1.0.0'
        }
    }
}

dependencies {
    implementation project(':currency-converter')
    fullImplementation project(":currency-formatter")
}


def addDependency(dependency, dependenciesNode) { //finish with dependencies
    if (dependency.group != null && dependency.name != null) {
        def dependencyNode = dependenciesNode.appendNode('dependency')
        dependencyNode.appendNode('groupId', dependency.group)
        dependencyNode.appendNode('artifactId', dependency.name)
        dependencyNode.appendNode('version', dependency.version)

        if (dependency.excludeRules.size() > 0) {
            def exclusions = dependencyNode.appendNode('exclusions')
            dependency.excludeRules.each { ExcludeRule ex ->
                def exclusion = exclusions.appendNode('exclusion')
                exclusion.appendNode('groupId', ex.group)
                if (ex.module == null || ex.module.isEmpty()) {
                    exclusion.appendNode('artifactId', "*")
                } else {
                    exclusion.appendNode('artifactId', ex.module)
                }
            }
        }
    }
}

afterEvaluate {
    android.productFlavors.all { productFlavor ->
        publishing.publications.create("${productFlavor.name}Aar", MavenPublication) {
            groupId 'com.example'
            artifactId "currency-utilities-${productFlavor.name}"
            version productFlavor.versionName
            artifact tasks.findByName("bundle${productFlavor.name.capitalize()}ReleaseAar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.withType(ModuleDependency).each {
                    println "implementation dependency: $it.group $it.name"
                    addDependency(it, dependenciesNode)
                }
                configurations.getByName(productFlavor.name + "Implementation").allDependencies.withType(ModuleDependency).each {
                    addDependency(it, dependenciesNode)
                }
            }
        }
    }
}